
CROSS(V):= matrix([0,-V[3],V[2]],[V[3],0,-V[1]],[-V[2],V[1],0]);

CROSS_QUAT(Q):= CROSS([Q[2],Q[3],Q[4]]);

MUL_QUAT_TPL(QT,inv):= 
block([ret,i,j,TQ],
      ret: zeromatrix(4,4),
      ret[1,1]: QT[1],
      for i:2 thru 4 do block(ret[i,1]: QT[i],ret[1,i]: -QT[i]),
      TQ: CROSS_QUAT(QT),
      for i:2 thru 4 do
      for j:2 thru 4 do
          block(if i=j then ret[i,j]: ret[i,j]+QT[1],
                ret[i,j]: ret[i,j]+inv*TQ[i-1,j-1]),
      ret);

MUL_QUAT_LEFT(QT):= MUL_QUAT_TPL(QT,1);

MUL_QUAT_RIGHT(QT):= MUL_QUAT_TPL(QT,-1);

APPLY_QUAT_DEBUG(QT):= 
block([ret],
      ret: zeromatrix(3,3),
      ret[1,1]:QT[1]*QT[1]+QT[2]*QT[2]-QT[3]*QT[3]-QT[4]*QT[4],
      ret[2,1]:2*(QT[3]*QT[2]+QT[1]*QT[4]),
      ret[3,1]:2*(QT[2]*QT[4]-QT[1]*QT[3]),

      ret[1,2]:2*(QT[3]*QT[2]-QT[1]*QT[4]),
      ret[2,2]:QT[1]*QT[1]-QT[2]*QT[2]+QT[3]*QT[3]-QT[4]*QT[4],
      ret[3,2]:2*(QT[3]*QT[4]+QT[1]*QT[2]),

      ret[1,3]:2*(QT[2]*QT[4]+QT[1]*QT[3]),
      ret[2,3]:2*(QT[3]*QT[4]-QT[1]*QT[2]),
      ret[3,3]:QT[1]*QT[1]-QT[2]*QT[2]-QT[3]*QT[3]+QT[4]*QT[4],
      ret);

APPLY_QUAT(QT):= 
block([ret,MQ,MQBAR,MQQBT,i,j],
      ret: zeromatrix(3,3),
      MQ: MUL_QUAT_LEFT(QT),
      MQBAR: MUL_QUAT_RIGHT(QT),
      MQQBT: MQ.transpose(MQBAR),
      for i:2 thru 4 do
      for j:2 thru 4 do
          ret[i-1,j-1]: MQQBT[i,j],
      ret);

ANG_VEL_QUAT_BODY_FIXED(QT,A):= 
block([R,denom,d1,d2,d3,d1P,d2P,d3P,w1,w2,w3],
      R: APPLY_QUAT(QT),
      denom: QT[1]*QT[1]+QT[2]*QT[2]+QT[3]*QT[3]+QT[4]*QT[4],
      d1: [R[1,1],R[2,1],R[3,1]],
      d2: [R[1,2],R[2,2],R[3,2]],
      d3: [R[1,3],R[2,3],R[3,3]],
      d1P: jacobian(d1,[A]),
      d2P: jacobian(d2,[A]),
      d3P: jacobian(d3,[A]),
      w1: -d2.d3P/denom,
      w2: -d3.d1P/denom,
      w3: -d1.d2P/denom,
      ratsimp([w1,w2,w3]));

ANG_VEL_QUAT_BODY_FIXED_DEBUG(QT,A):=
block([ZW],
      ZW: 2*transpose(MUL_QUAT_LEFT(QT)).transpose(jacobian(QT,[A])),
      ratsimp([ZW[2,1],ZW[3,1],ZW[4,1]]));

TIME_DERIVE_QUAT_BODY_FIXED(QT,W):= 
ratsimp(0.5*MUL_QUAT_LEFT(QT).transpose(matrix([0,W[1],W[2],W[3]])));

ANG_VEL_QUAT_REFERENCE(QT,A):=
block([ZW],
      ZW: 2*transpose(MUL_QUAT_RIGHT(QT)).transpose(jacobian(QT,[A])),
      ratsimp([ZW[2],ZW[3],ZW[4]]));

TIME_DERIVE_QUAT_REFERENCE(QT,W,A):= 
ratsimp(0.5*MUL_QUAT_RIGHT(QT).transpose(matrix([0,W[1],W[2],W[3]])));

BUILD_QUAT(AXIS,ANGLE):= 
block([AXISN,C,S],
      AXISN: AXIS/sqrt(matrix(AXIS).matrix(AXIS)),
      C: cos(ANGLE/2),
      S: sin(ANGLE/2),
      [C,S*AXISN[1],S*AXISN[2],S*AXISN[3]]);
